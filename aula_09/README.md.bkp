
# Bancos de dados

![Banco de Dados](images/banco-de-dados.png)

Neste capítulo iremos aprofundar nossos conhecimentos em bancos de dados, criando e gerenciando informações utilizando o MariaDB, um SGBD de código aberto e uso gratuito.

## O que é um banco de dados?

O banco de dados é a organização e armazenagem de informações sobre um domínio específico. De forma mais simples, é o agrupamento de dados que tratam do mesmo assunto, e que precisam ser armazenados para segurança ou conferência futura. 

É comum que empresas tenham diversas informações que precisam ser organizadas e disponibilizadas dentro do negócio para que sejam consultadas posteriormente pela equipe e pela gerência.

Por isso, é interessante ter um sistema de gerenciamento de banco de dados, SGBD, para conseguir manipular as informações e tornar a rotina da empresa muito mais simples.

Hoje, existem diversos tipos de SGBDs, e cada um é adequado para uma necessidade dos clientes. São os mais comuns: Oracle, DB2, MySQL, SQL Server, PostgreSQL e outros.

Se a sua empresa tem um site em WordPress ou em alguma outra plataforma, o banco de dados é fundamental para manter o bom funcionamento e a praticidade no dia a dia do negócio.
## MariaDB

Um SGBD é um sistema de gestor de base de dados, que disponibiliza uma interface para que clientes (usuários) possam interagir com o banco de dados de várias maneiras, como inserir dados, pesquisar, excluir, entre outras. Neste capítulo, vamos trabalhar com o SGBD MariaDB.

MariaDB é um SGDB que surgiu como fork do MySQL, criado pelo próprio fundador do projeto após sua aquisição pela Oracle. A intenção principal do projeto é manter uma alta fidelidade com o MySQL. MariaDB está disponível sob os termos da licença GPL v2. MariaDB é mantido atualizado com a última versão do MySQL e irá funcionar exatamente como MySQL. Todos os comandos, interfaces, bibliotecas e APIs que existem no MySQL também existem no MariaDB. Não há necessidade de conversão de dados para exibir informações armazenadas no MariaDB.

## SQL

A Linguagem SQL possui classificações para as instruções executadas, feitas de acordo com a função de cada instrução/comando:

* **DCL** - Linguagem de Controle de Dados: Comandos SQL responsáveis pela administração/autorização de dados e licença de usuários;
* **DDL** - Linguagem de Definição de Dados: Conjunto de comandos responsáveis pela criação de bancos, esquemas,  tabelas e constraints.
* **DML** - Linguagem de Manipulação de Dados: Comandos responsáveis por operações de manipulação como Inserir, consultar, atualizar ou excluir dados.
* **DQL** - Linguagem de Consulta de Dados: O único comando que pode ser definido como DQL é o SELECT usado para realização de consultas.

O servidor MySql/MariaDB armazena as informações dos usuários em quatro tabelas localizadas no banco de dados padrão chamado Mysql.

São estas:

* Tabela user: Armazena as informações de todos os usuários do banco e seus privilégisos a nível global;
* Tabela db: Armazena os privilégios dos usuários específicos de um banco de dados;
* Tabela tables_priv e columns_priv: Armazenam os privilégios associados a tabelas e colunas, respectivamente;

## Instalação

Vamos realizar a instalação do MariaDB na máquina **srv02-centos** para configurar o servidor de banco de dados.

```shell
[root@srv01-centos ~]# dnf module -y install mariadb:10.3
```

```shell
[root@srv01-centos ~]# vi /etc/my.cnf.d/charaset.cnf

[mysqld]
character-set-server = utf8mb4

[client]
default-character-set = utf8mb4
```

```shell
[root@srv01-centos ~]# systemctl enable --now mariadb
```

Configurações iniciais para MariaDB.

```shell
[root@srv01-centos ~]# mysql_secure_installation

NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we'll need the current
password for the root user.  If you've just installed MariaDB, and
you haven't set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none):
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

 # set root password
Set root password? [Y/n] y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

 # remove anonymous users
Remove anonymous users? [Y/n] y
 ... Success!

Normally, root should only be allowed to connect from 'localhost'.  This
ensures that someone cannot guess at the root password from the network.

 # disallow root login remotely
Disallow root login remotely? [Y/n] y
 ... Success!

By default, MariaDB comes with a database named 'test' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

 # remove test database
Remove test database and access to it? [Y/n] y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

 # reload privilege tables
Reload privilege tables now? [Y/n] y
 ... Success!

Cleaning up...

All done!  If you've completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!
```

```shell
[root@srv01-centos ~]# mysql -u root -p
```

```sql
 > select user,host,password from mysql.user; 
+------+-----------+-------------------------------------------+
| user | host      | password                                  |
+------+-----------+-------------------------------------------+
| root | localhost | *xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx |
| root | 127.0.0.1 | *xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx |
| root | ::1       | *xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx |
+------+-----------+-------------------------------------------+
3 rows in set (0.000 sec)
```

```sql
 > show databases; 
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)
```

```sql
 > create database test_database; 
Query OK, 1 row affected (0.000 sec)
```

```sql
 > create table test_database.test_table (id int, name varchar(50), address varchar(50), primary key (id)); 
Query OK, 0 rows affected (0.108 sec)
```

```sql
 > insert into test_database.test_table(id, name, address) values("001", "CentOS", "Hiroshima"); 
Query OK, 1 row affected (0.036 sec)
```

```sql
 > select * from test_database.test_table; 
+----+--------+-----------+
| id | name   | address   |
+----+--------+-----------+
|  1 | CentOS | Hiroshima |
+----+--------+-----------+
1 row in set (0.000 sec)
```

```sql
 > drop database test_database; 
Query OK, 1 row affected (0.111 sec)
```

```sql
 > exit
Bye
```
## Criação de schema de banco de dados

Acesse o banco de dados MySQL da **srv01-centos**:

```shell
 # mysql -u root -p
```

```sql
 > show databases;
 > CREATE database backup;
 > show databases;
```

Acesse a base backup recém criada:

```sql
 > use backup;
 > show tables;
 > <CTRL+L> (Limpa a Tela)
```

Crie uma tabela que irá armazenar os dados do backup:

```sql
 > CREATE TABLE log ( 
 	id INT NOT NULL AUTO_INCREMENT, 
 	inicio TIMESTAMP, 
 	fim TIMESTAMP,
 	server VARCHAR(100),
 	arquivo VARCHAR(100),
 	status VARCHAR(5),
 	PRIMARY KEY (id));
```

Crie uma tabela que irá armazenar a descrição dos servidores:

```sql
 > CREATE TABLE descricao ( 
id INT NOT NULL AUTO_INCREMENT, 
descricao VARCHAR(100), 
localizacao VARCHAR(6),
PRIMARY KEY (id));
```

Veja a tabela recém criada:

```sql
 > show tables;
 > desc log;
 > desc descricao;
```

Criando usuário e liberando acesso a base:
 
```sql
 > GRANT ALL PRIVILEGES ON log.* TO suporte@localhost IDENTIFIED BY '4linux' WITH GRANT OPTION;
 > GRANT ALL PRIVILEGES ON descricao.* TO suporte@localhost IDENTIFIED BY '4linux' WITH GRANT OPTION;
 > FLUSH PRIVILEGES;
```

Inserindo dados na tabela log:

```sql
 > INSERT INTO log (inicio,fim,server,arquivo,status) VALUES ('2015-03-04 15:21:21','2015-03-04 15:25:21','intranet', 'etc-2015-03-04-15:21:21.tar.gz','OK');
 > INSERT INTO log (inicio,fim,server,arquivo,status) VALUES ('2015-03-04 15:21:21','2015-03-04 15:25:21','intranet', 'etc-2015-03-04-15:21:21.tar.gz','FAIL');
```

Inserindo dados na tabela descrição:

```sql
 > INSERT INTO descricao (descricao,localizacao) VALUES ('Servidor WebserverInterno – Backup Server','Cloud');
 > INSERT INTO descricao (descricao,localizacao) VALUES ('Servidor Intranet – Intranet Server','Fisico');
```

Realizando consulta nas tabelas:

Sintaxe: `SELECT <campo1,campo2> FROM <nome da tabela>`

```sql
 > select * from log;
 > select * from descricao;
```

Realizando consulta com filtro:

```sql
 > SELECT server,inicio,fim FROM log WHERE status='OK';
 > SELECT descricao FROM descricao WHERE localizacao='Cloud';
```
 
Realizando consulta nas tabelas:

Para realizar uma pesquisa ordenada por determinada coluna:

```sql
 > select * from log ORDER BY arquivo;
```

Dessa forma, a consulta será ordenada por ordem alfabética com referencia ao campo arquivo.

Realizando consulta nas tabelas:
 
```sql
 > SELECT server,inicio,fim FROM log WHERE status='OK';
 > SELECT descricao FROM descricao WHERE localizacao='Cloud';
``` 

Alterar o nome do servidor intranet para srv01-centos:

```sql
 > UPDATE log SET server="Intranet" WHERE status='FAIL';
 > select * from log;
```

Apagar o registro com FAIL da base:

```sql
 > DELETE FROM log WHERE status='FAIL';
 > select * from log;
 > exit
```
## Backup da base de dados

É extremamente importante ter um dump da base de dados, para realizar a tarefa segue, abaixo, a instrução. Na linha de comando execute:

```shell
 # mysqldump -h localhost -u root -p123456 backup > backup.sql
 # cat backup.sql
```

Onde:

* **-h localhost**: Host a ser feito o dump;
* **-u root**: Usuário que irá realizar o dump;
* **-p 123456**: Senha para se conectar ao banco;
* **Backup**: Nome do banco de dados a ser feito o dump.

## Restore da base de dados

Para restaurar um backup execute:

```shell
 # mysql -h localhost -u root -p123456 backup < backup.sql
```

Assim configuramos nosso Banco de Dados com MariaDB, bem como aprendemos a gerenciar os dados por meio da linguagem MySQL.
